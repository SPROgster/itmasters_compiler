// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  BASE-PC
// DateTime: 23.11.2014 14:17:12
// UserName: Admin
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using SimpleLang.MiddleEnd;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,WHILE=6,
    IF=7,ELSE=8,ASSIGN=9,SEMICOLON=10,WRITE=11,COLON=12,
    COMMA=13,VAR=14,PLUS=15,MINUS=16,MULT=17,DIV=18,
    LBR=19,RBR=20,LESS=21,GREATER=22,EQUAL=23,NEQUAL=24,
    LEQUAL=25,GEQUAL=26,TRUE=27,FALSE=28,STRING=29,INUM=30,
    FNUM=31,ID=32};

public partial struct ValueType
{ 
			public float fVal; 
			public int iVal;
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€вления добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
    public BlockNode root; //  орневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[43];
  private static State[] states = new State[75];
  private static string[] nonTerms = new string[] {
      "num_expr", "ident", "T", "F", "expr", "assign", "statement", "cycle", 
      "while", "if", "write", "vardef", "idlist", "stlist", "block", "progr", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-16,1,-15,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-14,5,-7,74,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-17);
    states[7] = new State(new int[]{14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-7,8,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{32,14},new int[]{-13,11,-2,17});
    states[11] = new State(new int[]{12,12,13,15});
    states[12] = new State(new int[]{32,14},new int[]{-2,13});
    states[13] = new State(-16);
    states[14] = new State(-12);
    states[15] = new State(new int[]{32,14},new int[]{-2,16});
    states[16] = new State(-14);
    states[17] = new State(-13);
    states[18] = new State(-6);
    states[19] = new State(new int[]{9,20});
    states[20] = new State(new int[]{32,14,30,30,31,31,29,32,19,33,27,40,28,41},new int[]{-5,21,-1,22,-3,36,-4,39,-2,29});
    states[21] = new State(-15);
    states[22] = new State(new int[]{21,23,15,25,16,42,22,44,23,46,24,48,25,50,26,52,4,-31,10,-31,8,-31,20,-31,14,-31,32,-31,3,-31,5,-31,6,-31,7,-31,11,-31});
    states[23] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,24,-3,36,-4,39,-2,29});
    states[24] = new State(new int[]{15,25,16,42,4,-23,10,-23,8,-23,20,-23,14,-23,32,-23,3,-23,5,-23,6,-23,7,-23,11,-23});
    states[25] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-3,26,-4,39,-2,29});
    states[26] = new State(new int[]{17,27,18,37,21,-33,15,-33,16,-33,22,-33,23,-33,24,-33,25,-33,26,-33,4,-33,10,-33,8,-33,20,-33,14,-33,32,-33,3,-33,5,-33,6,-33,7,-33,11,-33});
    states[27] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-4,28,-2,29});
    states[28] = new State(-36);
    states[29] = new State(-38);
    states[30] = new State(-39);
    states[31] = new State(-40);
    states[32] = new State(-41);
    states[33] = new State(new int[]{32,14,30,30,31,31,29,32,19,33,27,40,28,41},new int[]{-5,34,-1,22,-3,36,-4,39,-2,29});
    states[34] = new State(new int[]{20,35});
    states[35] = new State(-42);
    states[36] = new State(new int[]{17,27,18,37,21,-32,15,-32,16,-32,22,-32,23,-32,24,-32,25,-32,26,-32,4,-32,10,-32,8,-32,20,-32,14,-32,32,-32,3,-32,5,-32,6,-32,7,-32,11,-32});
    states[37] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-4,38,-2,29});
    states[38] = new State(-37);
    states[39] = new State(-35);
    states[40] = new State(-29);
    states[41] = new State(-30);
    states[42] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-3,43,-4,39,-2,29});
    states[43] = new State(new int[]{17,27,18,37,21,-34,15,-34,16,-34,22,-34,23,-34,24,-34,25,-34,26,-34,4,-34,10,-34,8,-34,20,-34,14,-34,32,-34,3,-34,5,-34,6,-34,7,-34,11,-34});
    states[44] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,45,-3,36,-4,39,-2,29});
    states[45] = new State(new int[]{15,25,16,42,4,-24,10,-24,8,-24,20,-24,14,-24,32,-24,3,-24,5,-24,6,-24,7,-24,11,-24});
    states[46] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,47,-3,36,-4,39,-2,29});
    states[47] = new State(new int[]{15,25,16,42,4,-25,10,-25,8,-25,20,-25,14,-25,32,-25,3,-25,5,-25,6,-25,7,-25,11,-25});
    states[48] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,49,-3,36,-4,39,-2,29});
    states[49] = new State(new int[]{15,25,16,42,4,-26,10,-26,8,-26,20,-26,14,-26,32,-26,3,-26,5,-26,6,-26,7,-26,11,-26});
    states[50] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,51,-3,36,-4,39,-2,29});
    states[51] = new State(new int[]{15,25,16,42,4,-27,10,-27,8,-27,20,-27,14,-27,32,-27,3,-27,5,-27,6,-27,7,-27,11,-27});
    states[52] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,53,-3,36,-4,39,-2,29});
    states[53] = new State(new int[]{15,25,16,42,4,-28,10,-28,8,-28,20,-28,14,-28,32,-28,3,-28,5,-28,6,-28,7,-28,11,-28});
    states[54] = new State(-7);
    states[55] = new State(-8);
    states[56] = new State(new int[]{32,14,30,30,31,31,29,32,19,33},new int[]{-1,57,-3,36,-4,39,-2,29});
    states[57] = new State(new int[]{15,25,16,42,14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-7,58,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[58] = new State(-18);
    states[59] = new State(-9);
    states[60] = new State(new int[]{32,14,30,30,31,31,29,32,19,33,27,40,28,41},new int[]{-5,61,-1,22,-3,36,-4,39,-2,29});
    states[61] = new State(new int[]{14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-7,62,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[62] = new State(-19);
    states[63] = new State(-10);
    states[64] = new State(new int[]{32,14,30,30,31,31,29,32,19,33,27,40,28,41},new int[]{-5,65,-1,22,-3,36,-4,39,-2,29});
    states[65] = new State(new int[]{14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-7,66,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[66] = new State(new int[]{8,67,4,-20,10,-20});
    states[67] = new State(new int[]{14,10,32,14,3,4,5,56,6,60,7,64,11,70},new int[]{-7,68,-12,9,-6,18,-2,19,-15,54,-8,55,-9,59,-10,63,-11,69});
    states[68] = new State(-21);
    states[69] = new State(-11);
    states[70] = new State(new int[]{19,71});
    states[71] = new State(new int[]{32,14,30,30,31,31,29,32,19,33,27,40,28,41},new int[]{-5,72,-1,22,-3,36,-4,39,-2,29});
    states[72] = new State(new int[]{20,73});
    states[73] = new State(-22);
    states[74] = new State(-3);

    rules[1] = new Rule(-17, new int[]{-16,2});
    rules[2] = new Rule(-16, new int[]{-15});
    rules[3] = new Rule(-14, new int[]{-7});
    rules[4] = new Rule(-14, new int[]{-14,10,-7});
    rules[5] = new Rule(-7, new int[]{-12});
    rules[6] = new Rule(-7, new int[]{-6});
    rules[7] = new Rule(-7, new int[]{-15});
    rules[8] = new Rule(-7, new int[]{-8});
    rules[9] = new Rule(-7, new int[]{-9});
    rules[10] = new Rule(-7, new int[]{-10});
    rules[11] = new Rule(-7, new int[]{-11});
    rules[12] = new Rule(-2, new int[]{32});
    rules[13] = new Rule(-13, new int[]{-2});
    rules[14] = new Rule(-13, new int[]{-13,13,-2});
    rules[15] = new Rule(-6, new int[]{-2,9,-5});
    rules[16] = new Rule(-12, new int[]{14,-13,12,-2});
    rules[17] = new Rule(-15, new int[]{3,-14,4});
    rules[18] = new Rule(-8, new int[]{5,-1,-7});
    rules[19] = new Rule(-9, new int[]{6,-5,-7});
    rules[20] = new Rule(-10, new int[]{7,-5,-7});
    rules[21] = new Rule(-10, new int[]{7,-5,-7,8,-7});
    rules[22] = new Rule(-11, new int[]{11,19,-5,20});
    rules[23] = new Rule(-5, new int[]{-1,21,-1});
    rules[24] = new Rule(-5, new int[]{-1,22,-1});
    rules[25] = new Rule(-5, new int[]{-1,23,-1});
    rules[26] = new Rule(-5, new int[]{-1,24,-1});
    rules[27] = new Rule(-5, new int[]{-1,25,-1});
    rules[28] = new Rule(-5, new int[]{-1,26,-1});
    rules[29] = new Rule(-5, new int[]{27});
    rules[30] = new Rule(-5, new int[]{28});
    rules[31] = new Rule(-5, new int[]{-1});
    rules[32] = new Rule(-1, new int[]{-3});
    rules[33] = new Rule(-1, new int[]{-1,15,-3});
    rules[34] = new Rule(-1, new int[]{-1,16,-3});
    rules[35] = new Rule(-3, new int[]{-4});
    rules[36] = new Rule(-3, new int[]{-3,17,-4});
    rules[37] = new Rule(-3, new int[]{-3,18,-4});
    rules[38] = new Rule(-4, new int[]{-2});
    rules[39] = new Rule(-4, new int[]{30});
    rules[40] = new Rule(-4, new int[]{31});
    rules[41] = new Rule(-4, new int[]{29});
    rules[42] = new Rule(-4, new int[]{19,-5,20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
			ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
			CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
		}
        break;
      case 5: // statement -> vardef
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 7: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 8: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 9: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // statement -> write
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 13: // idlist -> ident
{ CurrentSemanticValue.stVal = new VarDefNode(ValueStack[ValueStack.Depth-1].eVal as IdNode); }
        break;
      case 14: // idlist -> idlist, COMMA, ident
{ 
			(ValueStack[ValueStack.Depth-3].stVal as VarDefNode).Add(ValueStack[ValueStack.Depth-1].eVal as IdNode);
			CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-3].stVal;
		}
        break;
      case 15: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 16: // vardef -> VAR, idlist, COLON, ident
{ 
			CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-3].stVal; 
			(CurrentSemanticValue.stVal as VarDefNode).TypeIdent = ValueStack[ValueStack.Depth-1].eVal as IdNode;
		}
        break;
      case 17: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 18: // cycle -> CYCLE, num_expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 19: // while -> WHILE, expr, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 20: // if -> IF, expr, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 21: // if -> IF, expr, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-4].eVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 22: // write -> WRITE, LBR, expr, RBR
{ CurrentSemanticValue.stVal = new WriteNode(ValueStack[ValueStack.Depth-2].eVal); }
        break;
      case 23: // expr -> num_expr, LESS, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Less); }
        break;
      case 24: // expr -> num_expr, GREATER, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Greater); }
        break;
      case 25: // expr -> num_expr, EQUAL, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Equal); }
        break;
      case 26: // expr -> num_expr, NEQUAL, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.NEqual); }
        break;
      case 27: // expr -> num_expr, LEQUAL, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.LEqual); }
        break;
      case 28: // expr -> num_expr, GEQUAL, num_expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.GEqual); }
        break;
      case 29: // expr -> TRUE
{ CurrentSemanticValue.eVal = new BoolNode(true); }
        break;
      case 30: // expr -> FALSE
{ CurrentSemanticValue.eVal = new BoolNode(false); }
        break;
      case 31: // expr -> num_expr
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 32: // num_expr -> T
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 33: // num_expr -> num_expr, PLUS, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Plus); }
        break;
      case 34: // num_expr -> num_expr, MINUS, T
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Minus); }
        break;
      case 35: // T -> F
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 36: // T -> T, MULT, F
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Mult); }
        break;
      case 37: // T -> T, DIV, F
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, BinOpType.Div); }
        break;
      case 38: // F -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 39: // F -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 40: // F -> FNUM
{ CurrentSemanticValue.eVal = new FloatNumNode(ValueStack[ValueStack.Depth-1].fVal); }
        break;
      case 41: // F -> STRING
{ CurrentSemanticValue.eVal = new StringNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 42: // F -> LBR, expr, RBR
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
